# -*- coding: utf-8 -*-
"""RN_MLP_classificacao_mao_de_poker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OeAzC0qa5mjkKz-ShLhQ70zhXVHneC9-
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

dados = pd.read_csv('/content/Data.csv')

dados.head

X = dados.drop('Class', axis=1)
y = dados['Class']

X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, train_size=2/3, random_state=1)
scaler = MinMaxScaler()

X_treino = scaler.fit_transform(X_treino)
X_teste = scaler.transform(X_teste)

rn = MLPClassifier(hidden_layer_sizes=(25, 25), learning_rate_init=0.01, max_iter= 400, random_state=1)

rn.fit(X_treino, y_treino)
print('Acurácia: ')
accuracy_score(y_teste, rn.predict(X_teste))



"""3 camadas ocultas: 30, 30, 30 taxa de aprendizado de 0.03 e 400iteraçoes - Conjunto de teste de 1/3 = acuracia de 0.4882


2 camadas ocultas: 25, 25 taxa de aprendizado de 0.01 e 400 iteraçoes, Conjunto de teste de 2/3 = acuracia de 0.9974
"""

# naipes -> Ordinal (1-4) representando {Copas, Spadas, Ouro, Paus} 
# rank ->Valor numérico (1-13) representando (Ás, 2, 3, … , Dama, Rei) 
# CLASS "Poker Hand" Ordinal (0-9)
#0: Nada na mão/ Mão de poker não reconhecida
#1: Um Par; Duas cartas do mesmo valor
#2: Dois Pares; Duas cartas de um mesmo valor, outras duas cartas diferentes de mesmo valor, e uma outra carta não relacionada
#3: Trinca; Três cartas do mesmo valor, e duas outras cartas não relacionadas.
#4: Straight; Cinco cartas em sequência.
#5: Flush; Cinco cartas do mesmo naipe.
#6: Full house; Três cartas do mesmo valor, e duas outras cartas diferentes de mesmo valor.
#7: Four of a kind; four equal ranks within five cards
#8: Straight flush; Cinco cartas em ordem numérica, todas do mesmo naipe.
#9: Royal flush; sequência de Ás, Rei, Dama, Valete e Dez, todos com o mesmo naipe.
aux = 'y'
while aux != 'n':
  s1 = input('naipe da carta 1: ')
  c1 = input('rank da carta 1: ')
  s2 = input('naipe da carta 2: ')
  c2 = input('rank da carta 2: ')
  s3 = input('naipe da carta 3: ')
  c3 = input('rank da carta 3: ')
  s4 = input('naipe da carta 4: ')
  c4 = input('rank da carta 4: ')
  s5 = input('naipe da carta 5: ')
  c5 = input('rank da carta 5: ')

  mao = [[s1,c1,s2,c2,s3,c3,s4,c4,s5,c5]]
  X_mao = scaler.transform(mao)

  y_hand = rn.predict(X_mao)
  print('sua mão de poker é: ', y_hand)

  aux = input('deseja testar novamente? (y/n): ')